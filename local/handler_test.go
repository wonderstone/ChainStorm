package local

import (
	"path/filepath"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestHandlerInterface(t *testing.T) {
	// initialize the in-memory database
	db := NewInMemoryDB()
	fp := filepath.Join("config", "config.yaml")
	db.Init(fp)
	db.Connect()

	// create a new node
	collection := "company"

	node := NewNode(
		WithNCollection(collection),
		WithNData(map[string]interface{}{
			"ID":               "600021",
			"companyName":      "Google",
			"companyEmployees": 1000,
		}))

	tmpdb := map[string]interface{}{
		"ID":               "600022",
		"companyEmployees": 2000,
	}
	// 3 methods are different
	db.AddNode(node)
	db.AddVertex(collection, node.Data) // this ID is generated by the uuid package
	db.AddVertex(collection, tmpdb)

	// add edge from node 600021 to node 600022
	id, err := db.AddEdge(
		"invest",
		"600021",
		"600022",
		map[string]interface{}{
			"investAmount": 1000000,
			"ID":           "600021-600022"})

	if err != nil {
		t.Errorf("Error: %v", err)
	}
	t.Logf("Edge ID: %v", id)
	// add edge from node 600001 to node 600021

	id, err = db.AddEdge(
		"invest",
		"600001",
		"600021",
		map[string]interface{}{
			"investAmount": 2000000,
			"ID":           "600001-600021"})
	if err != nil {
		t.Errorf("Error: %v", err)
	}
	t.Logf("Edge ID: %v", id)

	// GetFromVertices test
	fromVertices, err := db.GetFromVertices("600021")
	if err != nil {
		t.Errorf("Error: %v", err)
	}

	t.Logf("From Vertices: %v", fromVertices)

	assert.Equal(t, 1, len(fromVertices))

	// GetToVertices test
	toVertices, err := db.GetToVertices("600001")
	if err != nil {
		t.Errorf("Error: %v", err)
	}

	t.Logf("To Vertices: %v", toVertices)

	assert.Equal(t, 10, len(toVertices))

	// GetInEdges test
	inEdges, err := db.GetInEdges("600021")
	if err != nil {
		t.Errorf("Error: %v", err)
	}

	t.Logf("In Edges: %v", inEdges)

	assert.Equal(t, 1, len(inEdges))

	// GetOutEdges test
	outEdges, err := db.GetOutEdges("600001")
	if err != nil {
		t.Errorf("Error: %v", err)
	}

	t.Logf("Out Edges: %v", outEdges)

	assert.Equal(t, 10, len(outEdges))

	// UpdateVertex test
	err = db.UpdateVertex(
		"600021",
		map[string]interface{}{
			"companyEmployees": 3000,
			"lawyer":           "John"})
	if err != nil {
		t.Errorf("Error: %v", err)
	}

	// UpdateEdge test
	err = db.UpdateEdge(
		"600021-600022",
		"600021",
		"600022",
		map[string]interface{}{
			"investAmount": 2000000,
			"lawyer":       "John"})
	if err != nil {
		t.Errorf("Error: %v", err)
	}


	// DeleteVertex test

	err = db.DeleteVertex("600003")
	if err != nil {
		t.Errorf("Error: %v", err)
	}



	// DeleteEdge test

	err = db.DeleteEdge("600001-600002")
	if err != nil {
		t.Errorf("Error: %v", err)
	}



	// GetAllRelatedVertices test
	relatedVertices, err := db.GetAllRelatedVertices("600001")
	if err != nil {
		t.Errorf("Error: %v", err)
	}

	t.Logf("Related Vertices: %v", relatedVertices)

	// GetAllRelatedEdges test
	relatedEdges, err := db.GetAllRelatedEdges("600001")
	if err != nil {
		t.Errorf("Error: %v", err)
	}

	t.Logf("Related Edges: %v", relatedEdges)

	//GetAllRelatedVerticesInEdgeSlice test
	relatedVerticesInEdgeSlice, err := db.GetAllRelatedVerticesInEdgeSlice(
		"600001",
		"600021-600022",
		"600001-600006")
	if err != nil {
		t.Errorf("Error: %v", err)
	}

	t.Logf("Related Vertices In Edge Slice: %v", relatedVerticesInEdgeSlice)



	// GetAllRelatedVerticesInRange
	relatedVerticesInRange, err := db.GetAllRelatedVerticesInRange(
		"600001",
		0,10)
	if err != nil {
		t.Errorf("Error: %v", err)
	}
	
	t.Logf("Related Vertices In Range: %v", relatedVerticesInRange)

}
